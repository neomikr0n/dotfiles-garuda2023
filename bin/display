#!/bin/bash
# ░█▀▀▄░█▀▀░▄▀▀▄░█▀▄▀█░░▀░░█░▄░█▀▀▄░█▀▀█░█▀▀▄░░   # BETA
# ░█░▒█░█▀▀░█░░█░█░▀░█░░█▀░█▀▄░█▄▄▀░█▄▀█░█░▒█░░   changing gamma temperature on wayland
# ░▀░░▀░▀▀▀░░▀▀░░▀░░▒▀░▀▀▀░▀░▀░▀░▀▀░█▄▄█░▀░░▀░░
# original scripts by xfo-0 founded on:
# https://github.com/xfo-0/dot_confs/blob/f0eeb31179b120d486f4efe4e48eee86ad19fa95/bin/executable_wlr_temperature#L45
# https://github.com/xfo-0/dot_confs/blob/f0eeb31179b120d486f4efe4e48eee86ad19fa95/bin/executable_wlr_brightness

# GLOBAL FUNCTIONS:
notification() { # Displays a message
notify-send.py    --hint string:image-path:file://$icon \
                                   int:has-percentage:$progress_bar \
                                   boolean:transient:true \
                            -i easyeffects -t 999 -u low -a gammarelay -c gammarelay \
                            "wlr_temperature:" "                               $new_temperature°K"
                # --replaces-process gammarelay
                # string:x-canonical-private-synchronous:gammarelay \
                            # boolean:transient:true \
                            # -r "$noti_id" 
                            
#   h="99"    # lenght of the bar of the notification
#   t="1900"   # how many miliseconds the notification is shown
#   icon="/usr/share/icons/BeautyLine/preferences/scalable/preferences-desktop-notification-bell.svg"

#     notify-send --app-name eq -t $t -e -h int:value:$h \
#     -u 'normal' \
#     -i $icon \
#     "$message";
}

# LOCAL FUNCTIONS:
gamma() {
notification
# Check the first positional argument
if [ "$1" == "gamma_up" ]; then
    increment=1000
elif [ "$1" == "gamma_down" ]; then
    increment=-1000
else
    echo "Invalid argument. Must be 'up' or 'down'."
    exit 1
fi

direction=$1

shift

OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Parse options to the `my_script` command
while getopts "v:" opt; do
    case "$opt" in
    v)  value=$OPTARG
        # Check if the value is an integer between 1 and 10000
        if ! [[ "$value" =~ ^[1-9][0-9]{0,3}$ ]] || ((value > 10000)); then
            echo "must be an integer where 1<=x<=10000"
            exit 1
        else
            if [ "$direction" == "up" ]; then
                increment=$value
            fi
            if [ "$direction" == "down" ]; then
                increment=-$value
            fi
        fi
        ;;
      *) echo "Invalid option: -$OPTARG" >&2
         exit 1
         ;;
    esac
done

shift $((OPTIND-1))

# Get the current brightness value
current_temperature=$(busctl --user get-property rs.wl-gammarelay / rs.wl.gammarelay Temperature | awk '{print $2}')

# Calculate the new brightness value
new_temperature=$(echo "$current_temperature + $increment" | bc)

# Make sure the new brightness value is within the valid range [0, 1]
new_temperature=$(echo "if ($new_temperature < 1000) 1000 else if ($new_temperature > 10000) 10000 else $new_temperature" | bc)

# Set the new brightness value
busctl --user set-property rs.wl-gammarelay / rs.wl.gammarelay Temperature q "$new_temperature"

# https://github.com/phuhl/linux_notification_center#example-brightness-indicator
progress_bar=$(echo "$new_temperature" | bc -l)
progress_bar="$(($progress_bar / 100))"

# notify:
icon="/usr/share/icons/BeautyLine/actions/scalable/contrast.svg"

notification
}

brightness() {
lol
}


# main
if [[ "$1" == "gamma_"* ]]; then
  gamma "$@"
elif [[ "$1" == "brightnes_"* ]]; then
  brightnes "$@"
else
  notify_user
fi